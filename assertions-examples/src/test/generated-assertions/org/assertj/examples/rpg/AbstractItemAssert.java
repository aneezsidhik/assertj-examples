package org.assertj.examples.rpg;

import org.assertj.core.api.AbstractObjectAssert;

/**
 * Abstract base class for {@link Item} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractItemAssert<S extends AbstractItemAssert<S, A>, A extends Item> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractItemAssert}</code> to make assertions on actual Item.
   * @param actual the Item we want to make assertions on.
   */
  protected AbstractItemAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Item is magic.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item is not magic.
   */
  public S isMagic() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isMagic()) {
      failWithMessage("\nExpecting that actual Item is magic but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Item is not magic.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item is magic.
   */
  public S isNotMagic() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isMagic()) {
      failWithMessage("\nExpecting that actual Item is not magic but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
